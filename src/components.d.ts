/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { MethodFromParent, Person, RenderH1 } from "./components/my-rating/my-rating";
export namespace Components {
    interface CountTo {
        "decimal": string;
        "duration": number;
        "endValue": number;
        "pauseResume": () => Promise<boolean>;
        /**
          * 精度：几位小数
         */
        "precision": number;
        "reset": () => Promise<boolean>;
        "separator": string;
    }
    interface MyRating {
        "getValue": (params: any) => Promise<number>;
        "isShow": boolean;
        "maxValue": number;
        "methodFromParent": MethodFromParent;
        "person": object;
        "personArray": Person[];
        "renderH1": RenderH1;
        "setPerson": (params: any) => Promise<boolean>;
        "setPersonArray": (persons: []) => Promise<boolean>;
        "value": number;
    }
}
export interface CountToCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCountToElement;
}
export interface MyRatingCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyRatingElement;
}
declare global {
    interface HTMLCountToElement extends Components.CountTo, HTMLStencilElement {
    }
    var HTMLCountToElement: {
        prototype: HTMLCountToElement;
        new (): HTMLCountToElement;
    };
    interface HTMLMyRatingElement extends Components.MyRating, HTMLStencilElement {
    }
    var HTMLMyRatingElement: {
        prototype: HTMLMyRatingElement;
        new (): HTMLMyRatingElement;
    };
    interface HTMLElementTagNameMap {
        "count-to": HTMLCountToElement;
        "my-rating": HTMLMyRatingElement;
    }
}
declare namespace LocalJSX {
    interface CountTo {
        "decimal"?: string;
        "duration"?: number;
        "endValue"?: number;
        "onOn-end"?: (event: CountToCustomEvent<number>) => void;
        /**
          * 精度：几位小数
         */
        "precision"?: number;
        "separator"?: string;
    }
    interface MyRating {
        "isShow"?: boolean;
        "maxValue"?: number;
        "methodFromParent"?: MethodFromParent;
        "onRatingChange"?: (event: MyRatingCustomEvent<any>) => void;
        "person"?: object;
        "personArray"?: Person[];
        "renderH1"?: RenderH1;
        "value"?: number;
    }
    interface IntrinsicElements {
        "count-to": CountTo;
        "my-rating": MyRating;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "count-to": LocalJSX.CountTo & JSXBase.HTMLAttributes<HTMLCountToElement>;
            "my-rating": LocalJSX.MyRating & JSXBase.HTMLAttributes<HTMLMyRatingElement>;
        }
    }
}
